"use strict";(self.webpackChunkraffaello_docs=self.webpackChunkraffaello_docs||[]).push([[919],{830:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"guide/basic-structure","title":"Basic structure","description":"Template structure","source":"@site/docs/guide/01_basic-structure.md","sourceDirName":"guide","slug":"/guide/basic-structure","permalink":"/raffaello-docs/guide/basic-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/TheoKVA/raffaello-docs/tree/main/docs/guide/01_basic-structure.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Getting Started","permalink":"/raffaello-docs/getting-started"},"next":{"title":"Layers","permalink":"/raffaello-docs/guide/layers"}}');var r=t(4848),s=t(8453);const a={},c="Basic structure",l={},o=[{value:"Template structure",id:"template-structure",level:2},{value:"HTML Structure",id:"html-structure",level:3},{value:"JS Structure",id:"js-structure",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"basic-structure",children:"Basic structure"})}),"\n",(0,r.jsx)(n.h2,{id:"template-structure",children:"Template structure"}),"\n",(0,r.jsx)(n.p,{children:"Here is the most basic structure you can get.\nThis template will be a 1920x1080px image, with the right-half being a uniform red color, and the left-half a custom image input."}),"\n",(0,r.jsx)(n.p,{children:"We'll only need the most basic structure with an image input."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'\x3c!-- \n    \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n    \u2551   HTML   \u2551\n    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d \n--\x3e\n<div id="myContainer">\n    \x3c!-- Image Input container --\x3e\n    <div class="raffaello-imageInput" style="width:400px; height 400px"></div>\n\n    \x3c!-- Preview image and Download --\x3e\n    <img class="js-previewImage" src="path/to/initial/preview.png">\n    <input class="js-fileNameInput" type="text" placeholder="filename.jpg">\n    <button class="js-downloadButton"></button>\n</div>\n\n\x3c!-- \n    \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n    \u2551   SCRIPT   \u2551\n    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d \n--\x3e\n<script>\nnew class {\n    constructor() {\n        // Main container\n        this.container = document.querySelector(\'#myContainer\');\n\n        // Main canvas (hidden)\n        this.canvas = new Raffaello_Canvas({ \n            width: 1920,\n            height: 1080,\n            previewContainer: this.container.querySelector(\'.js-previewImage\'),\n            nameInputContainer: this.container.querySelector(\'.js-fileNameInput\'),\n        });\n\n        // Image input\n        this.inputImage = new Raffaello_ImageCropper( this.container, {\n            width: 1920/2, // half\n            height: 1080,\n            layerIndex: 0,\n            layerRef: this,\n        });\n\n        // Download interraction\n        this.container.querySelector(\'.js-downloadButton\').addEventListener(\'click\', () => this.canvas.downloadImage());\n    }\n\n    // Drawing instructions\n    initiateDrawing() {\n        this.canvas.resetLayers();\n        const thisTemplate = this;\n\n        // LAYER 0 // IMAGE INPUT\n        this.canvas.addLayer().draw(function() {\n            this.drawImageInput(thisTemplate.inputImage, 0, 0);\n            this.applyFilter(thisTemplate.inputImage.config.filter);   \n        });\n\n        // LAYER 1 // RED RECTANGLE\n        this.canvas.addLayer().draw(function() {\n            this.drawRect({\n                x: 1920/2,\n                y: 0,\n                width: 1920/2,\n                height: 1080,\n                color: "rgb(187, 54, 54)",\n            });\n        });\n\n        this.canvas.renderPreview();\n    }\n}\n<\/script>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"html-structure",children:"HTML Structure"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"myContainer"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.code,{children:"<div>"})," HTML element that contains all the following elements, it should be have a unique ",(0,r.jsx)(n.code,{children:"id"})," identifier. (Beware of this, when you have multiple instances on a page.)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"raffaello-imageContainer"})}),": A ",(0,r.jsx)(n.code,{children:"<div>"})," container of an image input. This is the element that will determine the size of the following cropper element.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"raffaello-cropperContainer"})}),": An ",(0,r.jsx)(n.code,{children:"<img>"})," image container that can be manipulated and cropped. Uses ",(0,r.jsx)(n.a,{href:"https://github.com/fengyuanchen/cropperjs/tree/main",children:"cropper.js"}),", a custom library by ",(0,r.jsx)(n.strong,{children:"Fengyuan Chen"}),", to reference input images and crop them to custom size."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["'",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"js-previewImage"})}),"'","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["An ",(0,r.jsx)(n.code,{children:"<img>"})," HTML element that will be updated with the rendered canvas."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["'",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"js-fileNameInput"})}),"'","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["An ",(0,r.jsx)(n.code,{children:"<input>"})," HTML element that will determine the name of the newly created file when downloading."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["'",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"js-downloadButton"})}),"'","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.code,{children:"<button>"})," HTML element that will trigger the download process."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"These elements are the most basic HTML structure you can get. All these will be present in 95% of your templates.\nYou can use any CSS workflow you desire to put in place these elements."}),"\n",(0,r.jsx)(n.h3,{id:"js-structure",children:"JS Structure"}),"\n",(0,r.jsxs)(n.p,{children:["To create a template with RAFFAELLO, once the HTML structure is here, you have to make a new unamed ",(0,r.jsx)(n.code,{children:"class"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"new class {\n    constructor() {\n        // Main container, to be referenced later\n        this.container = document.querySelector('#myContainer');\n\n        // Main canvas\n        this.canvas = new Raffaello_Canvas({ \n            // ...\n        });\n\n        // Image input (optionnal)\n        this.inputImage = new Raffaello_ImageCropper( this.container, {\n            // ...\n        });\n\n        // Interraction\n        this.container.querySelector('.js-downloadButton').addEventListener('click', () => this.canvas.downloadImage());\n    }\n\n    // Drawing instructions\n    initiateDrawing() {\n        this.canvas.resetLayers();\n        const thisTemplate = this;\n\n        // LAYER 0\n        this.canvas.addLayer().draw(function() {\n            // Draw something\n        });\n        // LAYER 1\n        this.canvas.addLayer().draw(function() {\n            // Draw something\n        });\n\n        this.canvas.renderPreview();\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this newly created ",(0,r.jsx)(n.code,{children:"class"}),", you have to declare within the ",(0,r.jsx)(n.code,{children:"contructor"})," the key elements:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["a ",(0,r.jsx)(n.code,{children:"'this.container'"})," which is the main HTML ",(0,r.jsx)(n.code,{children:"<div>"})," that contains all the others HTML element, like the cropper, or the other inputs."]}),"\n",(0,r.jsxs)(n.li,{children:["a ",(0,r.jsx)(n.code,{children:"'this.canvas = new Raffaello_Canvas({...})'"})," which is the main canvas that will get rendered"]}),"\n",(0,r.jsxs)(n.li,{children:["the interractions needed, like a ",(0,r.jsx)(n.code,{children:"'this.inputImage'"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Then you have to declare a function ",(0,r.jsx)(n.code,{children:"initiateDrawing()"})," in which you will make all the drawing instructions.\nAll the successive layers have to be called separately, in the right order. See ",(0,r.jsx)(n.a,{href:"#to-do",children:"layer ordering"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"initiateDrawing()"})," function allways follow this structure"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"initiateDrawing() {\n    this.canvas.resetLayers(); // To start by empting all the layers\n    const thisTemplate = this; // To reference the template's scope within a draw()\n\n    // All the layers draw()\n\n    this.canvas.renderPreview(); // To make the render\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);