"use strict";(self.webpackChunkraffaello_docs=self.webpackChunkraffaello_docs||[]).push([[876],{374:(e,a,n)=>{n.d(a,{A:()=>c});var r=n(6540),t=n(5246),o=n(6347);const l={apiTable:"apiTable_e8hp"};var i=n(4848);function s(e,a){let{name:n,children:l}=e;const s=function(e){let a=e;for(;(0,r.isValidElement)(a);)[a]=r.Children.toArray(a.props.children);if("string"!=typeof a)throw new Error(`Could not extract APITable row name from JSX tree:\n${JSON.stringify(e,null,2)}`);return a}(l),p=n?`${n}-${s}`:s,c=`#${p}`,h=(0,o.W6)();return(0,t.A)().collectAnchor(p),(0,i.jsx)("tr",{id:p,tabIndex:0,ref:h.location.hash===c?a:void 0,onClick:e=>{const a="TD"===e.target.tagName.toUpperCase(),n=!!window.getSelection()?.toString();a&&!n&&h.push(c)},onKeyDown:e=>{"Enter"===e.key&&h.push(c)},children:l.props.children})}const p=r.forwardRef(s);function c(e){let{children:a,name:n}=e;if("table"!==a.type)throw new Error("Bad usage of APITable component.\nIt is probably that your Markdown table is malformed.\nMake sure to double-check you have the appropriate number of columns for each table row.");const[t,o]=r.Children.toArray(a.props.children),s=(0,r.useRef)(null);(0,r.useEffect)((()=>{s.current?.focus()}),[s]);const c=r.Children.map(o.props.children,(e=>(0,i.jsx)(p,{name:n,ref:s,children:e})));return(0,i.jsxs)("table",{className:l.apiTable,children:[t,(0,i.jsx)("tbody",{children:c})]})}},3135:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"api/raffaello-image-cropper","title":"Raffaello_ImageCropper","description":"This is the class to create an image input, based on Cropper.","source":"@site/docs/api/03_raffaello-image-cropper.md","sourceDirName":"api","slug":"/api/raffaello-image-cropper","permalink":"/raffaello-docs/api/raffaello-image-cropper","draft":false,"unlisted":false,"editUrl":"https://github.com/TheoKVA/raffaello-docs/tree/main/docs/api/03_raffaello-image-cropper.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Raffaello_CanvasLayer","permalink":"/raffaello-docs/api/raffaello-canvas-layer"},"next":{"title":"Raffaello_BatchImageCropper","permalink":"/raffaello-docs/api/raffaello-batch-image-cropper"}}');var t=n(4848),o=n(8453),l=n(8069);n(374);const i={},s="Raffaello_ImageCropper",p={},c=[{value:"Usage",id:"usage",level:2}];function h(e){const a={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"raffaello_imagecropper",children:"Raffaello_ImageCropper"})}),"\n","\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-javascript",children:"new Raffaello_ImageCropper({ options })\n"})}),"\n",(0,t.jsx)(a.p,{children:"This is the class to create an image input, based on Cropper."}),"\n",(0,t.jsx)(a.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(l.A,{className:"small-code",language:"javascript",title:"Condensed version",children:"new class {\n  constructor() {\n      ...\n\n      // highlight-start\n      this.inputImage = new Raffaello_ImageCropper({\n          layerRef: this,\n          layerIndex: 0,\n      });\n      // highlight-end\n\n      ...\n  }\n  templateInstructions() {\n      const thisTemplate = this;\n      \n      // LAYER 0 // IMAGE INPUT\n      this.canvas.addLayer().draw(function() {\n          // highlight-next-line\n          this.drawImageInput(thisTemplate.inputImage, 0, 0);\n          this.applyFilter(thisTemplate.inputImage.config.filter);   \n      });\n\n  }\n}"}),"\n",(0,t.jsx)(l.A,{className:"small-code",language:"javascript",title:"Extended version",children:"this.inputImage = new Raffaello_ImageCropper({\n  layerRef: this,\n  layerIndex: 0,\n  width: 1920, // Optional - default this.canvas.width\n  height: 1080, // Optional - default this.canvas.height\n  onImageReady: () => { // Optional - When an image changes\n  },\n  onCrop: () => { // Optional - When the crop is happening\n  },\n  onCropStart: () => { // Optional - When the crop starts\n  },\n  onCropEnd: () => { // Optional - When the crop ends\n  },\n  onFilterChange: () => { // Optional - When the filter are being changed\n  },\n  viewMode: 0, // Optional - default 0\n  zoomOnWheel: 1, // Optional - default 1\n  onZoom: () => { // Optional - When a zoom happened, if available\n  },\n});"})]})}function d(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);